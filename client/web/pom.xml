<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- POM file generated with GWT webAppCreator -->
	<parent>
		<artifactId>client</artifactId>
		<groupId>org.sagebionetworks</groupId>
		<version>parent-1.0</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sagebionetworks</groupId>
	<artifactId>portal</artifactId>
	<packaging>war</packaging>
	<version>${applicationVersion}</version>
	<name>GWT Maven Archetype</name>

	<properties>
		<!-- Convenience property to set the GWT version -->
		<gwtVersion>2.1.1</gwtVersion>
		<!-- GWT needs at least java 1.5 -->
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
	</properties>

	<build>
		<!-- Generate compiled stuff in the folder used for developing mode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<plugins>

			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.1.0-1</version>
				<executions>
					<execution>
						<goals>
							<goal>clean</goal>
							<goal>compile</goal>
							<goal>test</goal>
							<goal>i18n</goal>
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
				<configuration>
					<runTarget>Portal.html</runTarget>
					<hostedWebapp>${webappDirectory}</hostedWebapp>
					<i18nMessagesBundle>org.sagebionetworks.web.client.Messages</i18nMessagesBundle>
				</configuration>
			</plugin>

			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>exploded</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
					<!-- This will create a jar that can be used for integration testing -->
					<attachClasses>true</attachClasses>
				</configuration>
			</plugin>
			
			<!-- We use this assembly to package the GWT RPC dependencies so they are aviablible fore integration testing. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/gwt-rpc-assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<dependencies>

		<!-- Using the Spring RestTemplate for all REST calls -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>org.springframework.web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>com.springsource.org.apache.commons.httpclient</artifactId>
			<version>3.1.0</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwtVersion}</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwtVersion}</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.gwt.inject</groupId>
			<artifactId>gin</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject.extensions</groupId>
			<artifactId>guice-servlet</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.5-ea09</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>1.5-ea09</version>
		</dependency>

		<dependency>
			<groupId>com.gwtplatform</groupId>
			<artifactId>gwtp-all</artifactId>
			<version>0.5</version>
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-dev</artifactId>
			<version>${gwtVersion}</version>
		</dependency>


		<dependency>
			<groupId>com.google.develop</groupId>
			<artifactId>gwt-syncproxy</artifactId>
			<version>0.2</version>
		</dependency>
		<!-- We are using this to serialize column metadata. We can drop it when 
			the API provides this functionality -->
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>${xstream.version}</version>
		</dependency>

		<!-- Test only dependencies -->
		<dependency>
			<groupId>com.sun.grizzly</groupId>
			<artifactId>grizzly-servlet-webserver</artifactId>
			<version>1.9.18-i</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jukito</groupId>
			<artifactId>jukito</artifactId>
			<version>1.0</version>
			<scope>test</scope>
		</dependency>
		<!-- There are two sets of objects that are serialized into JSON and passed 
		back and forth from the client to server.  The server-side objects can be found
		in the lib-models project.  We include this jar as a test dependency so that
		we can detect when the client and server version of the objects are out-of-sych.
		The scope of this dependency should remain as 'test' only. See: ClientAndServerObjectSynchTest.java  -->
		<dependency>
			<groupId>org.sagebionetworks</groupId>
			<artifactId>lib-models</artifactId>
			<version>${applicationVersion}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.extjs</groupId>
			<artifactId>gxt</artifactId>
			<version>2.2.1.SPECIAL</version>
		</dependency>

	</dependencies>


</project>
