<?xml version="1.0" encoding="UTF-8" ?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.sagebionetworks</groupId>
  <artifactId>portal</artifactId>
  <packaging>war</packaging>
  <version>develop-SNAPSHOT</version>
  <name>Synapse Portal</name>

  <properties>
    <!-- Synapse Web Client -->
    <!-- GWT needs at least java 1.5 -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <webappDirectory>
      ${project.build.directory}/${project.build.finalName}
    </webappDirectory>
    <synapse.version>484.0</synapse.version>
    <gwtVersion>2.10.0</gwtVersion>
    <org.springframework.version>6.0.17</org.springframework.version>
    <guiceVersion>3.0</guiceVersion>
    <ginVersion>2.1.2</ginVersion>
    <xstream.version>1.3.1</xstream.version>
    <schema-to-pojo.version>0.6.6</schema-to-pojo.version>
    <jackson.version>2.15.2</jackson.version>
    <jackson.databind.version>2.15.2</jackson.databind.version>
    <log4j.version>2.17.1</log4j.version>
    <gwtbootstrap3.version>1.5.10</gwtbootstrap3.version>
    <gwtbootstrap3.extras.version>1.5.2</gwtbootstrap3.extras.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <gwtvisualizationwrappers.version>
      1.6-gwt-2.7.0
    </gwtvisualizationwrappers.version>
    <gwt.module.suffix />
  </properties>

  <repositories>
    <repository>
      <id>sagebionetworks-releases-local</id>
      <name>sagebionetworks-releases-local</name>
      <url>
        https://sagebionetworks.jfrog.io/sagebionetworks/libs-releases-local
      </url>
    </repository>
    <repository>
      <id>sagebionetworks-ext</id>
      <name>sagebionetworks-releases-ext</name>
      <url>
        https://sagebionetworks.jfrog.io/sagebionetworks/ext-releases-local
      </url>
    </repository>
    <repository>
      <id>atlassian-m2-repository</id>
      <url>https://m2proxy.atlassian.com/repository/public</url>
    </repository>
    <repository>
      <id>mvn-gae-plugin-repo</id>
      <url>https://maven-gae-plugin.googlecode.com/svn/repository/</url>
    </repository>
    <repository>
      <id>maven-central-rep-1</id>
      <url>https://repo1.maven.org/maven2/</url>
    </repository>
    <repository>
      <id>sun-maven-repository</id>
      <url>https://download.java.net/maven/2/</url>
    </repository>
    <repository>
      <id>apache-repo-releases</id>
      <url>https://repository.apache.org/content/repositories/releases/</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>sagebionetworks-plugins-releases-local</id>
      <url>
        https://sagebionetworks.jfrog.io/sagebionetworks/plugins-releases-local/
      </url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </pluginRepository>
    <pluginRepository>
      <id>Maven Repo 1</id>
      <url>https://repo1.maven.org/maven2/</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </pluginRepository>
  </pluginRepositories>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.properties</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.properties</exclude>
        </excludes>
      </resource>
    </resources>

    <!-- Generate compiled stuff in the folder used for developing mode -->
    <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

    <pluginManagement>
      <plugins>
        <!-- Tell the eclipse m2e plugin to execute these lifecycle mappings 
					See: http://wiki.eclipse.org/M2E_plugin_execution_not_covered -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.sagebionetworks</groupId>
                    <artifactId>schema-to-pojo-maven-plugin</artifactId>
                    <versionRange>[0,)</versionRange>
                    <goals>
                      <goal>generate</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>gwt-maven-plugin</artifactId>
                    <versionRange>[0,)</versionRange>
                    <goals>
                      <goal>clean</goal>
                      <goal>compile</goal>
                      <goal>test</goal>
                      <goal>i18n</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <versionRange>[0,)</versionRange>
                    <goals>
                      <goal>exploded</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <versionRange>[1.7,)</versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- GWT Maven Plugin -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>${gwtVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>clean</goal>
              <goal>compile</goal>
              <goal>test</goal>
              <goal>i18n</goal>
            </goals>
          </execution>
        </executions>
        <!-- Plugin configuration. There are many available options, see gwt-maven-plugin 
					documentation at codehaus.org -->
        <configuration>
          <runTarget>Portal.html</runTarget>
          <hostedWebapp>${webappDirectory}</hostedWebapp>
          <i18nMessagesBundle>
            org.sagebionetworks.web.client.Messages
          </i18nMessagesBundle>
          <module>org.sagebionetworks.web.Portal${gwt.module.suffix}</module>
          <!-- GWT compiler options -->
          <compileReport>true</compileReport>
          <!-- Disabled because it causes an EmptyStackException on GWT 2.8.1 
						<soycDetailed>true</soycDetailed> -->
          <encoding>${project.build.sourceEncoding}</encoding>
          <!-- <compilerMetrics>true</compilerMetrics> -->
          <logLevel>INFO</logLevel>
          <sourceLevel>auto</sourceLevel>
          <extraJvmArgs>
            -Xmx2048m -Xms2048m -XX:MaxDirectMemorySize=256m
          </extraJvmArgs>
          <fragmentCount>1</fragmentCount>
          <disableCastChecking>true</disableCastChecking>
          <disableClassMetaData>true</disableClassMetaData>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.3.2</version>
        <executions>
          <!-- Copy static web files before executing gwt:run -->
          <execution>
            <id>execution1</id>
            <phase>compile</phase>
            <goals>
              <goal>exploded</goal>
            </goals>
            <configuration>
              <webappDirectory>${webappDirectory}</webappDirectory>
              <!-- This will create a jar that can be used for integration testing -->
              <attachClasses>true</attachClasses>
            </configuration>
          </execution>
          <!-- This next section is to copy the source maps into the WEB-INF directory 
						(during the package phase, from junit output) -->
          <execution>
            <id>execution2</id>
            <phase>package</phase>
            <goals>
              <goal>exploded</goal>
            </goals>
            <configuration>
              <webResources>
                <resource>
                  <directory>
                    ${webappDirectory}/Portal/.junit_symbolMaps/
                  </directory>
                  <targetPath>WEB-INF</targetPath>
                </resource>
              </webResources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- We use this assembly to package the GWT RPC dependencies so they 
				are aviablible fore integration testing. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.1</version>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/gwt-rpc-assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <!-- this is used for inheritance merges -->
            <phase>package</phase>
            <!-- bind to the packaging phase -->
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.0</version>
      </plugin>
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <port>8989</port>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.11.0</version>
        <executions>
          <!--We can install node/yarn as a part of the build process-->
          <execution>
            <id>Install node and yarn</id>
            <goals>
              <goal>install-node-and-yarn</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>

          <!--Install dependencies specified in package.json, including SRC-->
          <execution>
            <id>yarn install</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
            <phase>generate-resources</phase>
          </execution>

          <!--Compile SCSS (using `sass` - a Dart Sass compatible compiler from npm)-->
          <!--Our SCSS also depends on Synapse React Client SCSS-->
          <execution>
            <id>compile sass</id>
            <goals>
              <goal>yarn</goal>
            </goals>
            <configuration>
              <arguments>
                sass --no-source-map --style=compressed --unicode --stop-on-error --update --load-path=node_modules
                src/main/webapp/sass:src/main/webapp/generated
              </arguments>
            </configuration>
            <phase>compile</phase>
          </execution>
        </executions>

        <configuration>
          <nodeVersion>v18.16.0</nodeVersion>
          <yarnVersion>v1.22.17</yarnVersion>
        </configuration>
      </plugin>

      <!--Copy the Synapse React Client UMD build to the webapp directory-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>Copy dependencies from node_modules to webapp (generated)</id>
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <copy
                  file="${project.basedir}/node_modules/jquery/dist/jquery.min.js"
                  tofile="src/main/webapp/generated/jquery.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/jsplumb/dist/js/jsplumb.min.js"
                  tofile="src/main/webapp/generated/jsplumb.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/pica/dist/pica.min.js"
                  tofile="src/main/webapp/generated/pica.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/croppie/croppie.min.js"
                  tofile="src/main/webapp/generated/croppie.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/croppie/croppie.css"
                  tofile="src/main/webapp/generated/croppie.css"
                />
                <copy
                  file="${project.basedir}/node_modules/moment/min/moment.min.js"
                  tofile="src/main/webapp/generated/moment.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/synapse-react-client/dist/umd/synapse-react-client.production.min.js"
                  tofile="src/main/webapp/generated/synapse-react-client.production.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/synapse-react-client/dist/umd/synapse-react-client.production.min.css"
                  tofile="src/main/webapp/generated/synapse-react-client.production.min.css"
                />
                <copy
                  file="${project.basedir}/node_modules/react/umd/react.production.min.js"
                  tofile="src/main/webapp/generated/react.production.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-dom/umd/react-dom.production.min.js"
                  tofile="src/main/webapp/generated/react-dom.production.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-router-dom/umd/react-router-dom.min.js"
                  tofile="src/main/webapp/generated/react-router-dom.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-transition-group/dist/react-transition-group.min.js"
                  tofile="src/main/webapp/generated/react-transition-group.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-measure/dist/index.umd.js"
                  tofile="src/main/webapp/generated/react-measure.js"
                />
                <copy
                  file="${project.basedir}/node_modules/universal-cookie/umd/universalCookie.min.js"
                  tofile="src/main/webapp/generated/universalCookie.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-bootstrap/dist/react-bootstrap.min.js"
                  tofile="src/main/webapp/generated/react-bootstrap.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/prop-types/prop-types.min.js"
                  tofile="src/main/webapp/generated/prop-types.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/font-awesome/css/font-awesome.css"
                  tofile="src/main/webapp/generated/font-awesome.css"
                />
                <copy
                  file="${project.basedir}/node_modules/font-awesome/fonts/fontawesome-webfont.woff"
                  tofile="src/main/webapp/fonts/fontawesome-webfont.woff"
                />
                <copy
                  file="${project.basedir}/node_modules/font-awesome/fonts/fontawesome-webfont.woff2"
                  tofile="src/main/webapp/fonts/fontawesome-webfont.woff2"
                />
                <copy
                  file="${project.basedir}/node_modules/font-awesome/fonts/fontawesome-webfont.ttf"
                  tofile="src/main/webapp/fonts/fontawesome-webfont.ttf"
                />
                <copy
                  file="${project.basedir}/node_modules/plotly.js/dist/plotly.min.js"
                  tofile="src/main/webapp/generated/plotly.min.js"
                />
                <!-- Copy development versions of some key dependencies for devmode debugging -->
                <copy
                  file="${project.basedir}/node_modules/react/umd/react.development.js"
                  tofile="src/main/webapp/generated/react.development.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-dom/umd/react-dom.development.js"
                  tofile="src/main/webapp/generated/react-dom.development.js"
                />
                <copy
                  file="${project.basedir}/node_modules/react-plotly.js/dist/create-plotly-component.min.js"
                  tofile="src/main/webapp/generated/create-plotly-component.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/synapse-react-client/dist/umd/synapse-react-client.development.js"
                  tofile="src/main/webapp/generated/synapse-react-client.development.js"
                />
                <copy
                  file="${project.basedir}/node_modules/spark-md5/spark-md5.min.js"
                  tofile="src/main/webapp/generated/spark-md5.min.js"
                />
                <copy
                  file="${project.basedir}/node_modules/papaparse/papaparse.min.js"
                  tofile="src/main/webapp/generated/papaparse.min.js"
                />
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>com.google.gwt.eventbinder</groupId>
      <artifactId>eventbinder</artifactId>
      <version>1.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.gwtbootstrap3</groupId>
      <artifactId>gwtbootstrap3</artifactId>
      <version>${gwtbootstrap3.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gwtbootstrap3</groupId>
      <artifactId>gwtbootstrap3-extras</artifactId>
      <version>${gwtbootstrap3.extras.version}</version>
    </dependency>
    <dependency>
      <groupId>org.gwtvisualizationwrappers</groupId>
      <artifactId>gwtvisualizationwrappers</artifactId>
      <version>${gwtvisualizationwrappers.version}</version>
    </dependency>
    <!-- Sage Bionetworks Dependencies -->
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>lib-stackConfiguration</artifactId>
      <version>${synapse.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>synapseJavaClient</artifactId>
      <version>${synapse.version}</version>
    </dependency>
    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>lib-utils</artifactId>
      <version>${synapse.version}</version>
    </dependency>
    <dependency>
      <!-- jsoup HTML parser library @ http://jsoup.org/ -->
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>[1.14.2,)</version>
    </dependency>

    <!-- Make sure all the Jackson libraries are of the same version -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.commonmark/commonmark -->
    <dependency>
      <groupId>org.commonmark</groupId>
      <artifactId>commonmark</artifactId>
      <version>0.20.0</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.databind.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aspects</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${org.springframework.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- Used for timer triggers (cron-like) Note: spring-context-support also 
			depends on this libary as an optional dependancy. Since spring-context-support 
			version 4.0.2-RELEASE uses quartz version 1.8.6 that is the version of quartz 
			we are using. See the spring-context-support pom.xml. -->
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>2.3.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.14</version>
    </dependency>

    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>csv-utilities</artifactId>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-core</artifactId>
      <version>1.12.501</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>
    <!-- Logging -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-jcl</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
      <version>${gwtVersion}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwtVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-codeserver</artifactId>
      <version>${gwtVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guiceVersion}</version>
    </dependency>
    <dependency>
      <groupId>com.google.gwt.inject</groupId>
      <artifactId>gin</artifactId>
      <version>${ginVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
      <version>${guiceVersion}</version>
    </dependency>
    <!-- This provides the GWT MVP framework -->
    <dependency>
      <groupId>com.gwtplatform</groupId>
      <artifactId>gwtp-all</artifactId>
      <version>1.6</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>lib-shared-models</artifactId>
      <version>${synapse.version}</version>
    </dependency>

    <dependency>
      <groupId>org.sagebionetworks</groupId>
      <artifactId>schema-to-pojo-gwt</artifactId>
      <version>${schema-to-pojo.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>net.oauth.core</groupId>
      <artifactId>oauth</artifactId>
      <version>20100527</version>
    </dependency>
    <!-- Test only dependencies -->
    <dependency>
      <groupId>com.sun.grizzly</groupId>
      <artifactId>grizzly-servlet-webserver</artifactId>
      <version>1.9.18-i</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.gwt.gwtmockito</groupId>
      <artifactId>gwtmockito</artifactId>
      <version>1.1.9</version>
      <scope>test</scope>
    </dependency>

    <!-- Scribe library, imported for OAuth for LinkedIn -->
    <dependency>
      <groupId>org.scribe</groupId>
      <artifactId>scribe</artifactId>
      <version>1.2.3</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>32.1.1-jre</version>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava-gwt</artifactId>
      <version>32.1.1-jre</version>
    </dependency>

    <!-- Prov Tree layout -->
    <dependency>
      <groupId>org.abego.treelayout</groupId>
      <artifactId>org.abego.treelayout.core</artifactId>
      <version>1.0.3</version>
    </dependency>

    <!-- note: This refers to a custom POM in the SageBionetworks artifactory, 
			omitting Guice 2.0 -->
    <dependency>
      <groupId>org.openid4java</groupId>
      <artifactId>openid4java-nodeps</artifactId>
      <version>0.9.6.sb</version>
    </dependency>

    <dependency>
      <groupId>net.sourceforge.nekohtml</groupId>
      <artifactId>nekohtml</artifactId>
      <version>1.9.22</version>
    </dependency>
    <dependency>
      <groupId>org.apache.james</groupId>
      <artifactId>apache-mime4j</artifactId>
      <version>0.8.9</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.10.19</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.atlassian.jira</groupId>
      <artifactId>jira-rest-java-client</artifactId>
      <version>2.0.0-m2</version>
    </dependency>
    <dependency>
      <groupId>com.google.jsinterop</groupId>
      <artifactId>base</artifactId>
      <version>1.0.0</version>
    </dependency>
  </dependencies>

  <distributionManagement>
    <repository>
      <id>sagebionetworks</id>
      <name>sagebionetworks-releases</name>
      <url>
        https://sagebionetworks.jfrog.io/sagebionetworks/libs-releases-local
      </url>
    </repository>
    <snapshotRepository>
      <id>sagebionetworks</id>
      <name>sagebionetworks-snapshots</name>
      <url>
        https://sagebionetworks.jfrog.io/sagebionetworks/libs-snapshots-local
      </url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
  </distributionManagement>
</project>
