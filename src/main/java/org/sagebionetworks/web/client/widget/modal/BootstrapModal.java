package org.sagebionetworks.web.client.widget.modal;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Widget;

/**
 * A light-weight GWT wrapper for a boostrap modal dialog. See: <a
 * href="http://getbootstrap.com/javascript/#modals"
 * >getbootstrap.com/javascript/#modals</a> Note: To use an instance of this
 * class, it must be added somewhere on the page where the dialog is to be
 * launched from. The dialog itself is a hidden <div> that is acted upon by the
 * bootstrap javascript. Once the dialog has been added to a page it can be
 * shown by calling {@link #show()}
 * 
 * This class is designed to be used like standard GWT widget without any dependencies.
 * There is also zero business logic in this class therefore it is 100% "view" with no 
 * presenter.
 * 
 * @author jmhill
 * 
 */
public class BootstrapModal extends FlowPanel {

	private String modalTargetId;
	private String title;
	private Widget body;
	private String primaryButtonText;
	private String defaultButtonText;
	private Callback callback;

	/**
	 * Create a new Modal dialog.
	 * 
	 * Please do not add @inject to this constructor.  This class is designed to be used without any gin dependencies.
	 * Keep it pure "bootstrap", it is the right thing to do.
	 * 
	 * @param modalTargetId Give the dialog a unique ID.  This is used by the javascript to show and hide the dialog.
	 * @param title The text shown in the title bar.
	 * @param body This will be the main body of the dialog.  It can be any GWT widget.
	 * @param primaryButtonText The text for the primary button (i.e "Save").  The primary button is highlighted.
	 * @param defaultButtonText The text for the default button (i.e "Cancel").  The default button will not be highlighted.
	 * @param callback
	 */
	public BootstrapModal(String modalTargetId, String title, Widget body,
			String primaryButtonText, String defaultButtonText,
			final Callback callback) {
		super();
		this.modalTargetId = modalTargetId;
		this.title = title;
		this.body = body;
		this.primaryButtonText = primaryButtonText;
		this.defaultButtonText = defaultButtonText;
		this.callback = callback;
		// Setup this panel.
		Element element = this.getElement();
		element.setId(modalTargetId);
		element.setAttribute("tabindex", "-1");
		element.setAttribute("role", "dialog");
		String label = modalTargetId+"label";
		element.setAttribute("aria-labelledby", label);
		element.setAttribute("aria-hidden", "true");
		this.setStyleName("modal fade");
		// modal-dialog
		FlowPanel modalDialog = new FlowPanel();
		modalDialog.setStyleName("modal-dialog");
		this.add(modalDialog);
		// modal-content
		FlowPanel modalContent = new FlowPanel();
		modalContent.setStyleName("modal-content");
		modalDialog.add(modalContent);
		// modal-header
		FlowPanel modalHeader = new FlowPanel();
		modalHeader.setStyleName("modal-header");
		modalContent.add(modalHeader);
		// Close button in the header
		HTML headerCloseButton = new HTML("<button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>");
		headerCloseButton.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				callback.onDefault();
			}
		});
		modalHeader.add(headerCloseButton);
		// modal-title
		StringBuilder builder = new StringBuilder();
		builder.append("<h4 class=\"modal-title\" id=\"").append(label).append("\">");
		builder.append(title);
		builder.append("</h4>");
		HTML modelTitle = new HTML(builder.toString());
		modalHeader.add(modelTitle);
		// Modal body
		FlowPanel modalBody = new FlowPanel();
		modalBody.setStyleName("modal-body");
		modalBody.add(body);
		modalContent.add(modalBody);
		// modal-footer
		FlowPanel modalFooter = new FlowPanel();
		modalFooter.setStyleName("modal-footer");
		modalContent.add(modalFooter);
		// default button
		Button footerDefaultButton = new Button(defaultButtonText);
		footerDefaultButton.setStyleName("btn btn-default");
		footerDefaultButton.getElement().setAttribute("data-dismiss", "modal");
		footerDefaultButton.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				callback.onDefault();				
			}
		});
		modalFooter.add(footerDefaultButton);
		// primary button
		Button footerPrimaryButton = new Button(primaryButtonText);
		footerPrimaryButton.addStyleName("btn btn-primary");
		footerPrimaryButton.getElement().setAttribute("data-dismiss", "modal");
		footerPrimaryButton.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				callback.onPrimary();				
			}
		});
		modalFooter.add(footerPrimaryButton);
	}

	/**
	 * The Callback handles events generated by this modal dialog.
	 * 
	 */
	public interface Callback {
		/**
		 * Called when the primary button is pressed.
		 */
		public void onPrimary();

		/**
		 * Called when the default button is pressed.
		 */
		public void onDefault();
	}

	/**
	 * Once this dialog has been added to a page, call this method to show the dialog.
	 */
	public void show() {
		privateModal(this.modalTargetId, "show");
	}
	
	/**
	 * Call this method to hide the dialog.
	 */
	public void hide(){
		privateModal(this.modalTargetId, "hide");
	}

	/**
	 * The private native method what will trigger the show of the dialog.
	 * @param targetId
	 */
	private static native void privateModal(String targetId, String modalTargetId)/*-{
		$wnd.$('#' + targetId).modal(modalTargetId)
	}-*/;
	
}
